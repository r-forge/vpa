%\VignetteIndexEntry{An R package VPA}
\documentclass[a4paper]{article}
\usepackage{times}
\usepackage{hyperref}
\usepackage{url}
\usepackage[authoryear,round]{natbib}
\bibliographystyle{plainnat}

\title{An introduction to VPA}
\author{Qiang Hu}
\date{\today}

\begin{document}

\maketitle

\tableofcontents

\section{Introduction}

%The \texttt{VPA} package is designed to analyze variants in VCF format from next\-generation sequencing data. Specifically, the package provide functions to identify genetic variants with specified occurrence pattern in sequenced samples.
%This package provide a simple work flow and a batch mode to call somatic and germ-line variants. 
\texttt{VPA} (Variant Pattern Analyzer) is an R/Bioconductor package for prioritizing variants with user-specified frequency pattern from multiple study subjects in next generation sequencing study. The package starts from individual files of sequence and variant calls and extract variants with user-specified frequency pattern across the study subjects of interest. Positional level quality criteria including phred-like quality score and sequencing depth can be incorporated into variant extraction.  It can be used in studies with matched pair design as well as studies with multiple distinct groups of subjects. Written in open source R environment, it provides the flexibility for users to adopt, extend and customize the functionality for their specific needs. 
 
%In this vignette, we use small example data-sets rather than large real sequencing data to show the strategy of analyzing variants with \texttt{VPA} package.

The input for VPA consists basically of two types of files for each sample subject, containing position-level information of variant calls (required) and sequence calls (optional). The specific format of input files is Variant Call Format (VCF). VCF format has been widely used in the next-generation sequencing studies. The variant and sequence call data in VCF format can be generated using popular SAMtools or GATK. It contains quality information of all sequenced positions, such as sequencing depth and phred-like quality score.  

%\texttt{VPA} can import the VCF format data to analyze variants. According to the variants between case and control samples, variants can be extracted. 

The \texttt{VPA} package has been implemented in both sequential mode and parallel mode. %We provide a batch method to analyze variants in certain frequency pattern. 

First of all, the package should be installed and loaded.

<<initialize>>=
library(VPA)
@
A test data set is available in the sub-directory `extdata' of package `VPA'.
<<setwd>>=
dirpath <- system.file('extdata', package='VPA')
@ 
%setwd(system.file("extdata", package="VPA"))
\section{Work flow}
For a next-generation sequencing study, samples from different sources can often be classified into groups with distinct phenotype. For example, In an application of three-group design, samples can assigned to group with aggressive phenotype, group with benign phenotype, and group with normal phenotype. Variants with certain frequency pattern relating to phenotype status of groups could be of interest for prioritization, such as recurrent in group with aggressive phenotype, not recurrent in group with benign phenotype, and not observed in group with normal phenotype.

It takes three simple steps to extract the variants with user-specified frequency pattern and quality criteria.

\subsection{Quality filtering}
The first step is to load variant and sequence call data in VCF format and perform position-level quality filtering. The function \texttt{LoadFiltering} is designed to conduct this preprocessing procedure. The \texttt{index1.txt} file contains the annotation information of each sample. Each row is for one sample. The four columns are separated by tab, including sample name (required), group status (required), variant call file name (required) and sequence call file name (optional). Sample name column lists the sample name. Group status column lists status (e.g., aggressive, benign or normal) of group each sample belongs to. Variant call file name column lists the path of VCF formatted variant call file. Sequence call file name column lists the path of compressed VCF sequence call file. The high-volume data in tab-delimited VCF formats can be efficiently compressed by bgzip program and retrieved through tabix program from open-source SAMtool package. If the VCF format file is compressed by bgzip, tabix should be installed. The path of tabix could be specified in the optional argument of \texttt{LoadFiltering} function if it is not in the PATH system environment.

<<preprocessing>>=
read.table(file.path(dirpath, 'index1.txt'), sep='\t')
varflt <- LoadFiltering(file.path(dirpath, 'index1.txt'), datadir=dirpath, filtering=TRUE)
@ 
%The arguments ''filtercase'' and ''filtercontrol'' are used to decide whether the variants in case and control sample should be filtered. More arguments can be specified to set the cutoffs of quality scores. The result is a variant list including filtered VCF data of each samples, an index matrix for variant and the imported sample annotations. The variant index \texttt{VarIndex} is a matrix to indicate whether each position is altered relative to the reference sequence. ''TRUE'' is for altered. ''FALSE'' is for unaltered. ''NA'' is for not covered or qualified with the cutoffs.
The arguments ``filtering'' is used to decide whether position-level quality filtering should be conducted. For each genomic position of variant call, VPA will first retrieve variant call information from the subject(s) with variant called at this position. If the sequence call files are specified in the \texttt{index1.txt} file, it will take advantage of tabix function to retrieve sequence call information overlapping variant call position from the subject(s) without variant called at the same position.  It will filter out the variant positions which don't reach the user-specified quality criteria from further analysis. The quality criteria, including sequencing depth and phred-like quality score, can be set in the optional argument of \texttt{LoadFiltering} function. By default, the phred-like quality score is set at $\ge$ 20 and the sequencing depth is set at $\ge$ 10x. 
<<preprocessing>>=
varflt
@ 
\subsection{Specifying Pattern}
The pattern of variant frequency can be customized by user according to the experiment design. The minimum and maximum frequency value in each group are sufficient to make up of a pattern matrix. In the test data set, there are 4 case samples and 2 control samples respectively. It is an unpaired design. To prioritize variants that occur in at least one case sample but do not occur in any of the control samples, the minimum and maximum frequency in case group will be set as 1/4 and 1, respectively. The minimum and maximum frequency in control group will be both set as 0.
<<pattern>>=
pattern <- cbind(A=c(1/4,1), B=c(0,0))
pattern
@ 
The column names of the resulted frequency matrix correspond to the group names in the \texttt{index1.txt} file. The first row of the matrix lists the minimum frequency values of each group and the second row of the matrix lists the maximum frequency values of each group.

\subsection{Extracting variants}
Once an object for the list of qualified genomic position of variant call is obtained and the frequency pattern is defined, the last step is to extract variants with desired pattern. The \texttt{Patterning} function is designed for this purpose, with the the object of qualified variants from the first step and the object of customized pattern from the second step as input for the function. 
%In a unpaired design, the results are variants that are from the first step and meet the variant pattern. In a paired design, the results are the variants that not only meet the variant pattern but also alter in case sample but not alter in paired control sample.
<<variants>>=
varpat1 <- Patterning(varflt, pattern)
varpat1
@ 
The result is a \texttt{varlist} object, including \texttt{VarVCF}, \texttt{VarFrequency}, \texttt{Pattern} and \texttt{Samples}. \texttt{VarVCF} is a list of VCF format variant data fitting the specified frequency pattern and quality criteria. \texttt{VarFrequency} is a matrix recording every variant's frequency in each group.

\section{Parallel mode}
The first step of the \texttt{VPA} package, \textit{i.e.}, performing thorough position-level quality filtering using both variant and sequence call files, is the most time-consuming part. By default, the function \texttt{LoadFiltering} conduct quality filtering in a sequential mode. To speed up this step, We also implement the function to run the filtering in a parallel model. To run the \texttt{LoadFiltering} function in a parallel mode, one can set argument `parallel=TRUE'.

<<parallel>>=
varflt <- LoadFiltering(file.path(dirpath, 'index1.txt'), datadir=dirpath, filtering=TRUE, parallel=TRUE, pn=2)
@ 
The argument `pn=2' set the number of CPUs to be used. The function in parallel mode is implemented by the open source R package 'snowfall'. More arguments and details to run the function in parallel can be found in the manual of function \texttt{sfInit}.

Note that \texttt{VPA} package also allows user to perform fast quality filtering using only the variant call files. This can be performed by supplying the variant call files only in the \texttt{index1.txt}.

\section{Case study}
\subsection{Unpaired multi-groups design}
%In some cases, the experimental design is more complicated. For example, the case samples might come from different stages of investigated disease. We are interested in variants with higher frequencies in malignant cases and lower in benign cases. The example file ''index2.txt'' shows a three group design, with two case groups (cancer and benign) and one control group (normal).
In an application of three-group design (e.g., group with aggressive phenotype, group with benign phenotype, group with normal phenotype) with 2 subjects per group, one might want to extract variants recurrent in aggressive phenotype group (i.e., frequency $\ge$ 0.5), not recurrent in benign phenotype group (i.e., frequency $\le$ 0.5), and not observed in normal phenotype group at all (i.e., frequency =0.0). The \texttt{index2.txt} file shows such a three-group design.
<<case2>>=
read.table(file.path(dirpath, 'index2.txt'), sep='\t')
@ 
The first step is to load the VCF format data and perform position-level quality filtering. By default, the phred-like quality score is set at $\ge$ 20 and the sequencing depth is set at $\ge$ 10x. User can set the quality criteria in the optional argument of \texttt{LoadFiltering} function.
<<case2>>=
varflt <- LoadFiltering(file=file.path(dirpath, 'index2.txt'), datadir=dirpath, filtering=TRUE)
@ 
%The frequency is higher in the first case group with minimum 0.5 and maximum 1. The second case group is specified with a lower variant frequency range from 0 to 0.5.
For aggressive phenotype group, the minimum and maximum frequency will be set as 0.5 and 1, respectively. For benign phenotype group, the minimum and maximum frequency will be set as 0 and 0.5, respectively. For normal phenotype group, both the minimum and maximum frequency will be set as 0.  
<<case2>>=
pattern <- cbind(A=c(0.5,1), B=c(0,0.5), C=c(0,0))
@ 
The variants with with such a frequency pattern can be extracted using \texttt{Patterning} function.
<<case2>>=
varpat2 <- Patterning(varflt, pattern)
varpat2
@ 
\subsection{Paired design}
%For a paired design, DNA samples are from the case but different tissues. Usually, case sample is from disease tissue and paired control sample come from the normal tissue. The variants of the sequences are compared between case and control sample from the same case. Therefore, the first column of the index file should be matched with the same sample IDs between case and control group. The index file ''index3.txt'' shows a example of paired design.
Paired design sequencing experiment can be used to identify somatic type of variant (i.e., variants occurring in cancer case subject but not in matched cancer-free subject). Recurrent somatic variants can be of great interests for follow up analysis. In a paired design sequencing study, \texttt{VPA} package can be used to identify somatic type of variants with the user customized frequency pattern. The ``index3.txt'' file shows a example of paired design with two cases and two matched controls. The identity of case to its matched control can be determined by the sample name column. 

<<case3>>=
read.table(file.path(dirpath, 'index3.txt'), sep='\t')
@ 
The same three simple steps as described above can be used to extract the variants of interest.
<<case3>>=
varflt <- LoadFiltering(file=file.path(dirpath, 'index3.txt'), datadir=dirpath, filtering=TRUE)
pattern <- cbind(case=c(0.5,1), control=c(0,0))
varpat3 <- Patterning(varflt, pattern, paired=TRUE)
varpat3
@ 

\section{Summary results}
\subsection{Variant frequency}
%Generally, we are more interested in recurrent variants in case samples. The positions with higher variant frequencies are more likely related with the phenotype. 
Several functions are also provided to output the variant analysis results. For example, the function \texttt{vcfreq} can be used to summarize the variant frequency of a \texttt{varlist} object. We take the result data ``varpat1'' as an example:
<<vcfreq>>=
vfreq <- vcfreq(varpat1)
vfreq[5:10, ]
@ 
The resulted matrix lists reference, alternative sequences and frequencies across the study groups of all positions. The positions without variants are marked with ''-''.

\subsection{Variant information}
For position(s) of interest, the function \texttt{subvcf} can be used to retrieve the detailed variant information. For example, the above position ``1:906016" and ``1:908749" contain variant call in sample ``1151HZ0001". 
<<check>>=
vcf1 <- subvcf(varpat1$VarVCF[[1]], CHRPOS=c('1:906016', '1:908749'))
write.vcf(vcf1, file='')
@
The detailed sequence call information can also be retrieved from samples without variant called at the same position.
<<check>>=
vcf2 <- pos2seq(Pos=rbind(c('1', '906016'), c('1', '908749')), Seqfile=file.path(dirpath, varpat1$Samples[5,4]))
vcf2$vcf
@ 
\subsection{Output}
The function \texttt{write.vcf} can be used to export the identified variant with user-specified frequency pattern and quality criteria as a plain text file in VCF format. It can be used as input file for further analysis. 
<<output>>=
write.vcf(varpat1$VarVCF[[1]], file=tempfile())
@ 
\section{Session information}
<<sessioninfo>>=
sessionInfo()
@ 

\end{document}
>>=
@ 
>>=
@ 
